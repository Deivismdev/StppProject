TODO:
Extend DbSeeder to seed albums,images and comments
Ah dunno where & how to host :c
Maybe migrate to .NET 8?

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

3 LAB - Naudotojo sąsaja (UI)
• Naudotojo sąsajos projektas (projektuojamos sąsajos langų wireframe`ai)
• Sukurti naudotojo sąsajos sprendimą realizuotam REST API
• Responsive layout (bent 1 breakpoint`as, pvz. ties 768px)
• Images prisitaikymas (max-width taisyklė, kad paveikslėlis mažėtų neišlipdamas iš savo konteinerio elemento)
• Header, Content, Footer srityse stilius turėtų būti skirtingas (specifiškas). 
    Srityse turėtų būti bent po keletą skirtingų elementų. Analogiški elementai skirtingose srityse 
    turėtų įgauti skirtingą išvaizdą.
• Realizuoti informacijos įvedimo sąsają, bent su keletu skirtingų tipų input elementų.
• Panaudoti transitions arba animacijas, pagyvinančius naudotojo sąsają (UI)
• Padarytas responsive meniu (desktop: horizontalūs punktai, mobile: hamburger)
• Panaudoti vektorines ikonas (webfont, svg).
• Panaudotas kitoks šriftas (google fonts arba savo sugeneruotas)
• Panaudoti modalinį langą, kuriame pateikiama aktuali/prasminga informacija. (CONFIRM DELET)
• Parinkti tarpusavyje besiderinančias spalvas.
• UI elementai negali išsimėtyti, išdėstymas turi paklusti tinklelio horizontalioms ir vertikalioms linijoms.
• Elementų matomumas ir pasiekiamumas neturi būti apsunkintas.
• Įvedimo formos turi būti aiškios ir nuoseklios.
• Naudotojo sąsajos grafinis dizainas turi būti vientisas, atitikti projekto užduotį
• Projekto kodas turi būti laikomas Git saugykloje (github, bitbucket, gitlab ar kt.). 
    Dokumentacija - projektui sukurtame wiki arba projekto kodo Git saugykloje (.readme).
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

2 LAB - OAuth/JWT autorizacija + talpinimas debesyje
JWT autorizacija
https://www.youtube.com/watch?v=2UJNheQ5hIY 2023
https://www.youtube.com/watch?v=u_9fA4dRGAE 2022

• Realizuotas produktas turi būti pasiekiamas saityne, tam panaudojant debesų technologijas (AWS, Azure, Google Cloud ir kt.);
• Turi būti realizuota autentifikacja ir autorizacija naudojant OAuth2 arba JWT technologinius sprendimus. Naudotojo rolė turi būti saugoma žetono (token) viduje.  
• Projekto kodas turi būti laikomas Git saugykloje (github, bitbucket, gitlab ar kt.). Dokumentacija - projektui sukurtame wiki arba projekto kodo Git saugykloje (.readme).

workflow:
• install libraries
    Indentity
    EntityFrameworkCore
    JwtBearer
• configure startup
• extend DB with indentity and run migrations
• Token generation
• Register/login
• Seeding with roles and admin
• Authorization of resources


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

1 laboratorinis - API sąsaja

• Suprojektuoti ir realizuoti REST principais veikiančią API sąsają. Turi būti realizuoti visi užduotyje numatyti API sąsajos metodai!
• Paruošti programavimo aplinką leidžiančią atsiskaitymo metu patogiai paleisti ir pademonstruoti programą.
• Duomenų saugojimui turi būti panaudotas pasirinktas DB sprendimas. Gynimo metu DB turi būti užpildyta prasmingais (uždavinį atitinkančiais) duomenimis;
• Turi būti galimybė iškviesti sąsajos funkcijas (naudojantis naršykle, Postman ar kitu įrankiu) ir gauti teisingai suformuotą atsakymą: prasmingas turinys, 
  teisingas turinio tipas (json, xml, atom, text ar kt.), teisingas atsako kodas (http reponse code);
• Projekto kodas turi būti laikomas Git saugykloje (github, bitbucket, gitlab ar kt.). Dokumentacija - projektui sukurtame wiki arba projekto kodo Git saugykloje (.readme).

/api/album                                                      GET          list    200
/api/album/{albumId}                                            GET          one     200
/api/album                                                      POST         create  201
/api/album/{albumId}                                            PUT/PATCH    edit    200
/api/album/{albumId}                                            DELETE       remove  204 

/api/album/{albumId}/images                                     GET         list    200
/api/album/{albumId}/images/{imageId}                           GET         one     200
/api/album/{albumId}/images                                     POST        create  201
/api/album/{albumId}/images/{imageId}                           PUT/PATCH   edit    200 
/api/album/{albumId}/images/{imageId}                           DELETE      remove  204 

/api/album/{albumId}/images/{imageId}/comments                  GET         list    200
/api/album/{albumId}/images/{imageId}/comments/{commentId}      GET         one     200
/api/album/{albumId}/images/{imageId}/comments                  POST        create  200
/api/album/{albumId}/images/{imageId}/comments/{commentId}      PUT/PATCH   edit    200 
/api/album/{albumId}/images/{imageId}/comments/{commentId}      DELETE      remove  204 


VALIDATION:
https://www.youtube.com/watch?v=cYWl5iYaRBg&ab_channel=TomasBlazauskas 48:00
• Not found            - kai nera resurso
• Bad request          - neteisingai suformatuotas json
• 422 (Unprocessable Entity) - handle null or empty string
• 500                  - internal server error !turetu nebut!

Advanced features https://www.youtube.com/watch?v=ef6VtGhvU1Y&ab_channel=TomasBlazauskas
PAGING
/albums?pageNumber=1&pageSize=5
SORTING
/albums?orderBy=creationDate
Shaping
/albums?fields=title,description
HATEOAS
..
CACHING
..
CONCURRENCY
...


DATABASE MIGRATIONS
dotnet ef migrations add InitialCreate -o Data/Migrations
dotnet ef database update